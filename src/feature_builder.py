import pandas as pd

def generate_features(df):
    selected_feats = ['event_type', 'breaker_counts', 'fuse_counts', 'switch_counts', 'transformer_counts', 'recloser_counts', 'pole_counts', 'poly_ewkt', 'GUST_FORCE N-filtered_32-max_sum', 'GUST_FORCE N-filtered_32-max_mean', 'GUST_FORCE N-filtered_32-max_min', 'HOURLY_WET_SNOW_ACCUM_RATE m/h-filtered_32-max_max', 'HOURLY_SNOW_DEPTH_WATER_EQUIV_ACCUM_RATE m-2/h-filtered_32-max_max', 'GUST_FORCE N-filtered_24-max_sum', 'GUST_FORCE N-filtered_24-max_mean', 'Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max_sum', 'Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max_mean', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-0)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-0)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-5)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-5)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-10)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-10)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-15)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-15)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-20)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-max-20)^2', '(10 metre wind speed_m s**-1 (max)_lambert_level 10 m-filtered_32-max-10)^2', '(10 metre wind speed_m s**-1 (max)_lambert_level 10 m-filtered_32-max-15)^1', '(10 metre wind speed_m s**-1 (max)_lambert_level 10 m-filtered_32-min-5)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-max-0)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-max-5)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-max-10)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-max-15)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-max-15)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-max-20)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-max-20)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-mean-10)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-mean-15)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-mean-15)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-mean-20)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_32-mean-20)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-0)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-5)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-10)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-10)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-15)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-15)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-20)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-max-20)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-mean-15)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-mean-20)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_16-mean-20)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-mean-10)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-mean-15)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-mean-15)^2', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-mean-20)^1', '(Wind speed (gust)_m s**-1 (max)_lambert_level 10 m-filtered_24-mean-20)^2', 'LU_23_30', 'LU_23_60', 'canopy_interval_11_20_60', 'length_proxy_30', 'line_length_30', 'length_proxy_60', 'line_length_60']


    # Use all data after Nov 1, 2018 (15 storms) as test set
    test_df = df.loc[df['SimStartDate'] >= '2018-11-01']
    train_df = df.loc[df['SimStartDate'] < '2018-11-01']

    X = train_df.drop(['outage_count'], axis=1)
    y = train_df['outage_count']

    return X, y, selected_feats

class FeatureBuilder:
    def filter_best_features(self):
        pass
